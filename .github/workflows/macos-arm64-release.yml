name: macOS ARM64 Release Build

on:
  push:
    branches:
      - add-macos-arm64-workflow  # Testing branch
      - macos-arm64-release-build
    tags:
      - '*'
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-macos-arm64:
    name: Build OpenSCAD for macOS ARM64
    runs-on: macos-14  # Apple Silicon runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup build environment
      run: |
        echo "Setting up build environment for ARM64"
        echo "BUILD_DATE=$(date '+%Y.%m.%d')" >> $GITHUB_ENV
        echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Cache Homebrew packages
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Caches/Homebrew
          ~/Library/Caches/Homebrew/downloads
          /opt/homebrew/Cellar
          /opt/homebrew/opt
        key: ${{ runner.os }}-brew-${{ hashFiles('scripts/macosx-build-homebrew.sh') }}
        restore-keys: |
          ${{ runner.os }}-brew-

    - name: Cache Qt
      uses: actions/cache@v4
      with:
        path: |
          /opt/homebrew/opt/qt*
          /opt/homebrew/Cellar/qt*
        key: ${{ runner.os }}-qt-${{ hashFiles('scripts/macosx-build-homebrew.sh') }}
        restore-keys: |
          ${{ runner.os }}-qt-

    - name: Cache build dependencies
      uses: actions/cache@v4
      with:
        path: |
          /opt/homebrew/Cellar/cgal
          /opt/homebrew/Cellar/boost
          /opt/homebrew/Cellar/eigen
          /opt/homebrew/Cellar/opencsg
          /opt/homebrew/Cellar/lib3mf
        key: ${{ runner.os }}-deps-${{ hashFiles('scripts/macosx-build-homebrew.sh') }}
        restore-keys: |
          ${{ runner.os }}-deps-

    - name: Install dependencies via Homebrew
      run: |
        brew update
        # Handle potential cmake conflicts
        brew uninstall --ignore-dependencies cmake || true
        # Install build tools including ccache for faster builds
        brew install automake libtool cmake pkg-config wget meson python-packaging ccache || true
        # Run the dependency installation script
        ./scripts/macosx-build-homebrew.sh
        # Ensure key packages are linked
        brew link eigen || true
        brew link boost || true
        brew link cgal || true
        brew link opencsg || true
        brew link glew || true

    - name: Setup ccache
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-ccache-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-ccache-

    - name: Configure ccache
      run: |
        # Ensure ccache is linked
        brew link ccache || true
        which ccache || echo "ccache not in PATH"
        export PATH="/opt/homebrew/opt/ccache/libexec:$PATH"
        /opt/homebrew/bin/ccache --set-config=max_size=500M
        /opt/homebrew/bin/ccache --set-config=compression=true
        /opt/homebrew/bin/ccache -z  # Zero stats

    - name: Configure build
      run: |
        mkdir -p build
        cd build
        # Use date-based version for non-tag builds
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION="${{ github.ref_name }}"
        else
          VERSION="${{ env.BUILD_DATE }}.ci.${{ env.SHORT_SHA }}"
        fi
        # Enable ccache
        export PATH="/opt/homebrew/opt/ccache/libexec:$PATH"
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DOPENSCAD_VERSION="$VERSION"

    - name: Build OpenSCAD
      run: |
        cd build
        export PATH="/opt/homebrew/opt/ccache/libexec:$PATH"
        make -j$(sysctl -n hw.ncpu)
        # Show ccache stats
        /opt/homebrew/bin/ccache -s || echo "ccache stats not available"

    - name: Verify ARM64 build
      run: |
        cd build
        file OpenSCAD.app/Contents/MacOS/OpenSCAD | grep arm64
        ./OpenSCAD.app/Contents/MacOS/OpenSCAD --version

    - name: Create DMG installer
      run: |
        cd build
        # Create a DMG for easy distribution
        VERSION="${{ github.ref_name }}"
        if [[ "$VERSION" != v* ]]; then
          VERSION="dev-${{ env.SHORT_SHA }}"
        fi
        
        # Create temporary directory for DMG contents
        mkdir -p dmg_contents
        cp -R OpenSCAD.app dmg_contents/
        ln -s /Applications dmg_contents/Applications
        
        # Create DMG
        hdiutil create -volname "OpenSCAD-${VERSION}-ARM64" \
          -srcfolder dmg_contents \
          -ov -format UDZO \
          "OpenSCAD-${VERSION}-macOS-ARM64.dmg"
        
        # Clean up
        rm -rf dmg_contents
        
        # Move DMG to artifacts directory
        mkdir -p ../artifacts
        mv *.dmg ../artifacts/

    - name: Code signing (optional)
      if: env.MACOS_CERTIFICATE != ''
      env:
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        MACOS_IDENTITY: ${{ secrets.MACOS_IDENTITY }}
      run: |
        # This step requires Apple Developer certificates
        # Add code signing here if you have certificates
        echo "Code signing would happen here with proper certificates"
        # codesign --deep --force --verify --verbose \
        #   --sign "$MACOS_IDENTITY" \
        #   build/OpenSCAD.app

    - name: Notarization (optional)
      if: env.APPLE_ID != ''
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # This step requires Apple Developer account
        echo "Notarization would happen here with proper credentials"
        # xcrun notarytool submit artifacts/*.dmg \
        #   --apple-id "$APPLE_ID" \
        #   --password "$APPLE_PASSWORD" \
        #   --team-id "$APPLE_TEAM_ID" \
        #   --wait

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openscad-macos-arm64-${{ env.SHORT_SHA }}
        path: artifacts/*.dmg
        retention-days: 30

    - name: Create checksums
      run: |
        cd artifacts
        for file in *.dmg; do
          shasum -a 256 "$file" > "$file.sha256"
        done

    - name: Upload checksums
      uses: actions/upload-artifact@v4
      with:
        name: checksums-macos-arm64-${{ env.SHORT_SHA }}
        path: artifacts/*.sha256

  # Release creation can be handled separately or via existing release process
  # The build artifacts will be available for download from the workflow run

